print("""
[{'role': 'system', 'content': '\nYou are a helpful conversational assistant. Below are the details about the use case which you need to abide by strictly:\n<usecase_details>\nyou are an agent that helps users with their queries related to geography. You have access to an SQL database and a tool that you can use to execute SQL queries that can help you fetch information about a location, and more.\n</usecase_details>\n\nYou are currently in a specific state of the conversational-flow described below \nDetails about the current-state:\nInstructions to be followed:\n- The thought should be very descriptive and should include the reason for generating the given sql query.\n- Make the conversation coherent. The responses generated should feel like a normal conversation. \n- Do not generate unicode characters or hindi characters at all.\n\nBot specific instructions to be followed: (Note: These instructions are specific to the bot type and should be followed strictly overriding the general instructions)\n- Use informal, more conversational and colloquial language. Avoid decorative words and choice of too much drama in your language.\n- Avoid bulleted lists, markdowns, structured outputs, and any special characters like double quotes, single quotes, or hyphen etc in your responses.\nRespond to the user in the conversation strictly following the below JSON format:\n{\n    "thought": "...",  # Thought process of the bot to decide what content to reply with, which tool(s) to call, briefly describing reason for tool arguments as well\n    "sql_query": "..."  # SQL query to be executed\n}\nONLY make use of the tables and fields mentioned below and ensure that the SQL query is valid. ENSURE THAT TABLE NAMES AND FIELD NAMES ARE VALID.\nReturn \'CANNOT_SOLVE\' in the sql_query in case the query is not solvable with the given database, ONLY IF YOU ARE COMPLETELY CONFIDENT THAT IT CANNOT BE SOLVED.\n\nDATABASE DESCRIPTION:\nDatabase Schema Description:\n\nSchema: public\nTable: geography_columns\nColumns:\n  - Column: f_table_catalog, Type: name (Nullable)\n  - Column: f_table_schema, Type: name (Nullable)\n  - Column: f_table_name, Type: name (Nullable)\n  - Column: f_geography_column, Type: name (Nullable)\n  - Column: coord_dimension, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: type, Type: text (Nullable)\n\nSchema: public\nTable: geometry_columns\nColumns:\n  - Column: f_table_catalog, Type: character varying (Nullable), Max Length: 256.0\n  - Column: f_table_schema, Type: name (Nullable)\n  - Column: f_table_name, Type: name (Nullable)\n  - Column: f_geometry_column, Type: name (Nullable)\n  - Column: coord_dimension, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: type, Type: character varying (Nullable), Max Length: 30.0\n\nSchema: public\nTable: spatial_ref_sys\nColumns:\n  - Column: srid, Type: integer, Precision: 32.0, Scale: 0.0\n  - Column: auth_name, Type: character varying (Nullable), Max Length: 256.0\n  - Column: auth_srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srtext, Type: character varying (Nullable), Max Length: 2048.0\n  - Column: proj4text, Type: character varying (Nullable), Max Length: 2048.0\n\n\n\n\n        <state_details>\n        Name: GlobalState\n        Goal: To generate an SQL query to extract the relevant information from a geospatial POSTGIS database.\n        Instructions: YOUR OUTPUT SHOULD BE GROUNDED ON THE TOOL OUTPUT, DO NOT HALLUCINATE INFORMATION.\n        Tools: []\n    '}]
[{'role': 'system', 'content': '\nYou are a helpful conversational assistant. Below are the details about the use case which you need to abide by strictly:\n<usecase_details>\nyou are an agent that helps users with their queries related to geography. You have access to an SQL database and a tool that you can use to execute SQL queries that can help you fetch information about a location, and more.\n</usecase_details>\n\nYou are currently in a specific state of the conversational-flow described below \nDetails about the current-state:\nInstructions to be followed:\n- The thought should be very descriptive and should include the reason for generating the given sql query.\n- Make the conversation coherent. The responses generated should feel like a normal conversation. \n- Do not generate unicode characters or hindi characters at all.\n\nBot specific instructions to be followed: (Note: These instructions are specific to the bot type and should be followed strictly overriding the general instructions)\n- Use informal, more conversational and colloquial language. Avoid decorative words and choice of too much drama in your language.\n- Avoid bulleted lists, markdowns, structured outputs, and any special characters like double quotes, single quotes, or hyphen etc in your responses.\nRespond to the user in the conversation strictly following the below JSON format:\n{\n    "thought": "...",  # Thought process of the bot to decide what content to reply with, which tool(s) to call, briefly describing reason for tool arguments as well\n    "sql_query": "..."  # SQL query to be executed\n}\nONLY make use of the tables and fields mentioned below and ensure that the SQL query is valid. ENSURE THAT TABLE NAMES AND FIELD NAMES ARE VALID.\nReturn \'CANNOT_SOLVE\' in the sql_query in case the query is not solvable with the given database, ONLY IF YOU ARE COMPLETELY CONFIDENT THAT IT CANNOT BE SOLVED.\n\nDATABASE DESCRIPTION:\nDatabase Schema Description:\n\nSchema: public\nTable: geography_columns\nColumns:\n  - Column: f_table_catalog, Type: name (Nullable)\n  - Column: f_table_schema, Type: name (Nullable)\n  - Column: f_table_name, Type: name (Nullable)\n  - Column: f_geography_column, Type: name (Nullable)\n  - Column: coord_dimension, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: type, Type: text (Nullable)\n\nSchema: public\nTable: geometry_columns\nColumns:\n  - Column: f_table_catalog, Type: character varying (Nullable), Max Length: 256.0\n  - Column: f_table_schema, Type: name (Nullable)\n  - Column: f_table_name, Type: name (Nullable)\n  - Column: f_geometry_column, Type: name (Nullable)\n  - Column: coord_dimension, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: type, Type: character varying (Nullable), Max Length: 30.0\n\nSchema: public\nTable: spatial_ref_sys\nColumns:\n  - Column: srid, Type: integer, Precision: 32.0, Scale: 0.0\n  - Column: auth_name, Type: character varying (Nullable), Max Length: 256.0\n  - Column: auth_srid, Type: integer (Nullable), Precision: 32.0, Scale: 0.0\n  - Column: srtext, Type: character varying (Nullable), Max Length: 2048.0\n  - Column: proj4text, Type: character varying (Nullable), Max Length: 2048.0\n\n\n\n\n        <state_details>\n        Name: GlobalState\n        Goal: To generate an SQL query to extract the relevant information from a geospatial POSTGIS database.\n        Instructions: YOUR OUTPUT SHOULD BE GROUNDED ON THE TOOL OUTPUT, DO NOT HALLUCINATE INFORMATION.\n        Tools: []\n    '}, {'role': 'user', 'content': 'Get the nearest aadhar center to 17.4677° N, 78.4487° E'}]
""")
l = [('agriculture', 0.0001735687406949778, 0.31961562421196527), ('allotments', 0.00010393334827991613, 0.19138654721994053), ('ashram', 7.154320749987034e-07, 0.0013174219523423001), ('bamboo', 1.4796915000850829e-08, 2.7247563158388302e-05), ('barren', 7.358956999824699e-08, 0.00013551043958896674), ('basin', 0.00447538327094018, 8.241129203345778), ('brownfield', 0.0002692707124499318, 0.4958446232719356), ('Bus Station', 4.091531700057831e-07, 0.0007534291330690433), ('bus stop', 2.788064149968807e-07, 0.0005134040035476657), ('cemetery', 0.0004110509784650412, 0.7569238247566812), ('commercial', 0.009477042421105331, 17.451361443175458), ('conservation', 0.012701800437014953, 23.389545024277602), ('construction', 0.0011660051437248986, 2.1471231533615605), ('faar', 1.8086061600067126e-06, 0.0033304314156430187), ('farm', 0.010464046472864556, 19.268865648366088), ('farmland', 0.6450987194029012, 1187.907621238296), ('farmyard', 0.007208764524490049, 13.274474217341746), ('field', 1.6200798049990177e-05, 0.029832723108703326), ('Fish farm', 1.9393709999787947e-07, 0.00035712264216176406), ('garages', 3.101349681995503e-05, 0.05710935105835299), ('garden', 2.1626290155012744e-05, 0.03982341635715675), ('gated_community', 3.201854404996787e-06, 0.005896008061078763), ('government', 0.00021886784402495407, 0.40303099687112526), ('grass', 0.001185747347899991, 2.1834771470903678), ('green', 1.4254981399957352e-06, 0.002624962743887185), ('green_belt', 1.898929999944576e-07, 0.00034967569323654963), ('greenfield', 0.008645522426479731, 15.920171085609645), ('greenhouse_horti', 2.7997538529992057e-05, 0.051555658685036955), ('harbour', 0.0009715951308902458, 1.7891296727589692), ('high-water', 2.454287910002342e-06, 0.00451941265005661), ('hotel', 7.314842499935649e-08, 0.00013469809956953802), ('Hundu SAMSAN', 1.6994478000073983e-07, 0.00031294233468546004), ('industrial', 0.1789335846560485, 329.4946378209349), ('institutional', 4.172459845500387e-05, 0.07683315282920374), ('Kangla fort', 5.946910466497728e-05, 0.10950851479775345), ('landfill', 0.0014716927809200154, 2.7100271911784635), ('meadow', 0.012899653443499422, 23.75387855528407), ('military', 0.045811227905400126, 84.35841698380617), ('mixed', 3.462922330007619e-06, 0.006376747781145615), ('observatory', 3.273607572500044e-05, 0.06028136884096737), ('open space', 9.31313466499534e-06, 0.0171495358980196), ('orchard', 0.12263002617577587, 225.81527184194368), ('park', 3.564095500152367e-08, 6.56305163862502e-05), ('pitch', 0.0007682035773099458, 1.4145972650413279), ('plant_nursery', 1.0506826150036538e-06, 0.0019347641660499156), ('pond', 9.816038650012701e-07, 0.001807560110104184), ('port', 8.948258649992408e-06, 0.016477640285778687), ('prison', 6.491735416996846e-05, 0.11954111432822105), ('public semi publ', 2.7782684000385725e-07, 0.0005116001794742525), ('qiarru', 3.0102713274987083e-05, 0.05543220199290874), ('quarry', 0.09294277216310079, 171.14811124374), ('ra', 2.3160397289984733e-05, 0.04264837554962895), ('railway', 0.00911291273969022, 16.78084015602665), ('railways', 1.7782642685007027e-05, 0.03274558782387544), ('recre', 8.070181600005712e-07, 0.0014860718118146579), ('recreation_groun', 0.0006178386592401718, 1.1377099813287117), ('reservoir', 0.15588199774310238, 287.0466295519504), ('residenial', 5.1940296150018585e-05, 0.09564470024539892), ('residential', 0.31697532762472774, 583.6895906078378), ('residential, zop', 2.3222872749960557e-06, 0.004276342007353429), ('retail', 0.0009099112082199571, 1.675542713671944), ('salt_pond', 0.0004788482223299561, 0.8817680699299286), ('saltpond', 1.2270407579984719e-05, 0.022595162944139074), ('shrub', 7.721534749998232e-06, 0.014218707464912056), ('SS Mota Singh Mo', 1.5618529750069e-06, 0.002876051364637166), ('steps', 7.641907500165505e-08, 0.00014072079027915477), ('surface_mining', 0.0007704065281601098, 1.4186538567309617), ('telephone exchan', 5.170743149984312e-07, 0.0009521589503413379), ('traffic_island', 9.867709499879969e-08, 0.000181707496333626), ('transportation', 1.2607321950216216e-06, 0.0023215568993732757), ('vacant', 5.122196894999634e-06, 0.009432194710733812), ('village_green', 0.0021762373386150363, 4.007400483691801), ('vineyard', 2.2738285905001085e-05, 0.04187108470072191), ('water', 3.709557999945883e-08, 6.830911435756582e-05), ('water_wellfield', 8.423189442496629e-05, 0.15510759257338402), ('wood', 0.00041675406490495834, 0.7674256900414691), ('yes', 4.82073463649922e-05, 0.08877071434842311)]
